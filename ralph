#!/usr/bin/env python

import json
from pprint import pprint

import os.path

home = os.path.expanduser('~')
dot_ralph = home + '/.ralph'

# Ensure ~/.ralph exists.
if not os.path.exists(dot_ralph):
	print 'Creating ~/.ralph...'

	os.makedirs(dot_ralph)

# Ensure ~/.ralph/config.json exists.
if not os.path.exists(home + '/.ralph/config.json'):
	print 'Generating default configuration in ~/.ralph/config.json...'

	configuration = open(home + '/.ralph/config.json', 'w+')
	configuration.write('{\n\t"aliases": "~/.ralph/aliases",\n\t"blueprints": "~/.ralph/blueprints"\n}')
	configuration.close()

# Ensure ~/.ralph/aliases exists.
if not os.path.exists(dot_ralph + '/aliases'):
	print 'Creating ~/.ralph/aliases...'

	os.makedirs(dot_ralph + '/aliases')

# Ensure ~/.ralph/blueprints exists.
if not os.path.exists(dot_ralph + '/blueprints'):
	print 'Creating ~/.ralph/blueprints...'

	os.makedirs(dot_ralph + '/blueprints')

# Get configuration.
with open(home + '/.ralph/config.json') as configuration_file:
	configuration = json.load(configuration_file)

# Is the blueprint valid?
def validate_blueprint(blueprint_json):
	try:
		# Valid JSON?
		json.loads(blueprint_json)

		# Actual JSON object?
		blueprint = json.load(blueprint_json)
	except ValueError as e:
		print 'Invalid JSON.'

		return False

	# Valid barebones blueprint?
	try:
		blueprint['blueprint']
		blueprint['command']
	except IndexError as e:
		print 'Invalid blueprint.'

		return False

	# Number of arguments in blueprint equals number of arguments specified?
	number_of_arguments = blueprint['blueprint'].count('{')
	if number_of_arguments > 0:
		try:
			if len(blueprint['arguments']) != number_of_arguments:
				print 'Number of arguments described does not match number of arguments in blueprint.'

				return False
		except IndexError as e:
			print 'No arguments described.'

			return False

for blueprint in os.listdir(configuration['blueprints'].replace('~', home)):
	with open(dot_ralph + '/blueprints/' + blueprint) as data_file:
		try:
			json.loads(data_file.read())

			if not validate_blueprint(data_file.read()):
				# Valid JSON, but not a valid blueprint.
				print 'Invalid blueprint in ' + blueprint + '.'
				continue
		except ValueError as e:
			print 'Invalid JSON in ' + blueprint + '.'
			continue # Move on to next blueprint...

		data = json.load(data_file)

	blueprint = data["blueprint"].split()

	alias = open(dot_ralph + '/aliases/' + blueprint[0], 'w')

	# Function declration.
	alias.write('#!/usr/bin/env bash\n\n' + blueprint[0] + '() {')

	if 'arguments' in data:
		# Obtaining alias arguments.
		alias.write('\n\tparameters=(${@:1:$(($#-($#-' + str(len(data['arguments'])) + ')))})')

		alias.write('\n\n\tcase ${#parameters[@]} in')

		for number_of_arguments in range(0, len(data['arguments']) + 1):
			alias.write('\n\t\t' + str(number_of_arguments) + ' ) ')

			for index, argument in enumerate(data['arguments']):
				alias.write(argument + 'Set=')

				if index < number_of_arguments:
					alias.write('true')
				else:
					alias.write('false')

				alias.write('\n\t\t\t\t')

			alias.write(';;\n');

		alias.write('\tesac')

		alias.write('\n\n\techo');
		for argument in data['arguments']:
			alias.write(' $' + argument + 'Set')
		alias.write('\n')

		for index, argument in enumerate(data['arguments']):
			alias.write('\n\tif $' + argument + 'Set; then\n\t\t')
			if data['blueprint'][data['blueprint'].index(argument) - 1] == '*':
				alias.write(argument + '=${parameters[' + str(index) + ']}')
			else:
				alias.write('case ${parameters[' + str(index) + ']} in')

				for value in data['arguments'][argument]['values']:
					if value != 'default':
						alias.write('\n\t\t\t"' + value + '" ) ' + argument + '="' + data['arguments'][argument]['values'][value] + '";;\n')

				invalidValueError = data['arguments'][argument]['errors']['invalid']
				for invalidValueErrorArgumentIndex, invalidValueErrorArgument in enumerate(data['arguments']):
					invalidValueError = invalidValueError.replace('{' + invalidValueErrorArgument + '}', '${parameters[' + str(invalidValueErrorArgumentIndex) + ']}')

				alias.write('\n\t\t\t* )' + ' echo "' + invalidValueError + '";;')

				alias.write('\n\t\tesac')

			alias.write('\n\telse')
			alias.write('\n\t\t' + argument + '="' + data['arguments'][argument]['values']['default'] + '"')
			alias.write('\n\tfi')

			alias.write('\n')

	# Generate command from blueprint and data.
	command = data['command']
	command = command.replace('{', '$').replace('}', '')

	# Call the blueprint's command.
	alias.write('\n\t' + command)

	# Close the function declration.
	alias.write('\n}')

	# Call the function...
	alias.write('\n\n' + blueprint[0] + ' "$@"')

	# Trailing new line.
	alias.write('\n')

	alias.close()
