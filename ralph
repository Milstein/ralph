#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Terminal colors.
class colors:
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'

import json

import os.path
import sys

home = os.path.expanduser('~')
dot_ralph = home + '/.ralph'

someOperationsExecuted = False

# Ensure ~/.ralph exists.
if not os.path.exists(dot_ralph):
	print 'Creating ~/.ralph...'

	os.makedirs(dot_ralph)

	someOperationsExecuted = True

# Ensure ~/.ralph/config.json exists.
if not os.path.exists(home + '/.ralph/config.json'):
	print 'Generating default configuration in ~/.ralph/config.json...'

	configuration = open(home + '/.ralph/config.json', 'w+')
	configuration.write('{\n\t"aliases": "~/.ralph/aliases/",\n\t"blueprints": "~/.ralph/blueprints/"\n}')
	configuration.close()

	someOperationsExecuted = True

# Get configuration.
if os.path.exists(home + '/.ralph/config.json'):
	with open(home + '/.ralph/config.json') as configuration_file:
		configuration = json.load(configuration_file)

# Ensure ~/.ralph/aliases exists.
if not os.path.exists(configuration['aliases'].replace('~', home)):
	print 'Creating ' + configuration['aliases'] + '...'

	os.makedirs(configuration['aliases'].replace('~', home))

	someOperationsExecuted = True

# Ensure ~/.ralph/blueprints exists.
if not os.path.exists(configuration['blueprints'].replace('~', home)):
	print 'Creating ' + configuration['blueprints'] + '...'

	os.makedirs(configuration['blueprints'].replace('~', home))

	someOperationsExecuted = True

# Add ~/.ralph/aliases to $PATH...
with open(home + '/.bashrc', 'a') as bashrc:
	bashrc.write('\nPATH=' + configuration['aliases'] + ':$PATH')

with open(home + '/.zshrc', 'a') as zshrc:
	zshrc.write('\nexport PATH="' + configuration['aliases'].replace('~', home) + '":$PATH')

# Is the blueprint valid?
def validate_blueprint(blueprint_json):
	try:
		# Actual JSON object?
		blueprint = json.loads(blueprint_json)
	except ValueError as e:
		error = 'Invalid JSON.'

	# Valid barebones blueprint?
	try:
		blueprint['blueprint']
		blueprint['command']
	except IndexError as e:
		error = 'Invalid blueprint.'

	# Number of arguments in blueprint equals number of arguments specified?
	number_of_arguments = blueprint['blueprint'].count('{')
	if number_of_arguments > 0:
		try:
			if len(blueprint['arguments']) != number_of_arguments:
				error = 'Arguments described do not match arguments in blueprint.'

		except KeyError as e:
			error = 'No arguments described.'

	try:
		error

		print colors.FAIL + colors.BOLD + u' - [✖] Invalid blueprint in ' + colors.UNDERLINE + blueprint['blueprint'].split()[0] + colors.ENDC + colors.FAIL + colors.BOLD + '.' + colors.ENDC
		print colors.FAIL + '  - ' + error + colors.ENDC
		return False
	except NameError as e:
		return True

for blueprint in os.listdir(configuration['blueprints'].replace('~', home)):
	with open(configuration['blueprints'].replace('~', home) + blueprint) as data_file:
		contents = data_file.read()

		try:
			json.loads(contents)

			if not validate_blueprint(contents):
				# Valid JSON, but not a valid blueprint.
				continue
		except ValueError as e:
			print colors.FAIL + colors.BOLD + u'- [✖] Invalid JSON in ' + blueprint + '.' + colors.ENDC
			continue # Move on to next blueprint...

		data = json.loads(contents)

	blueprint = data["blueprint"].split()

	alias = open(configuration['aliases'].replace('~', home) + blueprint[0], 'w')

	# Function declration.
	alias.write('#!/usr/bin/env bash\n\n' + blueprint[0] + '() {')

	if 'arguments' in data:
		# Obtaining alias arguments.
		alias.write('\n\tparameters=(${@:1:$(($#-($#-' + str(len(data['arguments'])) + ')))})')

		alias.write('\n\n\tcase ${#parameters[@]} in')

		for number_of_arguments in range(0, len(data['arguments']) + 1):
			alias.write('\n\t\t' + str(number_of_arguments) + ' ) ')

			for index, argument in enumerate(data['arguments']):
				alias.write(argument + 'Set=')

				if index < number_of_arguments:
					alias.write('true')
				else:
					alias.write('false')

				alias.write('\n\t\t\t\t')

			alias.write(';;\n');

		alias.write('\tesac\n')

		for index, argument in enumerate(data['arguments']):
			alias.write('\n\tif $' + argument + 'Set; then\n\t\t')
			if data['blueprint'][data['blueprint'].index(argument) - 1] == '*': # Any value.
				alias.write(argument + '=${parameters[' + str(index) + ']}')
			else: # Certain values.
				alias.write('case ${parameters[' + str(index) + ']} in')

				for value in data['arguments'][argument]['values']:
					if value != 'default':
						alias.write('\n\t\t\t"' + value + '" ) ' + argument + '="' + data['arguments'][argument]['values'][value] + '";;\n')

				invalidValueError = colors.FAIL + 'Invalid value for ' + colors.BOLD + argument + colors.ENDC + colors.FAIL + '.'
				if data['arguments'][argument].has_key('errors'):
					if data['arguments'][argument]['errors'].has_key('invalid'):
						invalidValueError = data['arguments'][argument]['errors']['invalid']

				for invalidValueErrorArgumentIndex, invalidValueErrorArgument in enumerate(data['arguments']):
					invalidValueError = invalidValueError.replace('{' + invalidValueErrorArgument + '}', colors.BOLD + '${parameters[' + str(invalidValueErrorArgumentIndex) + ']}' + colors.ENDC + colors.FAIL)

				alias.write('\n\t\t\t* )' + ' echo "' + colors.FAIL)
				alias.write(u'[✖] '.encode('utf8'))
				alias.write(invalidValueError + '"\n\t\t\t\t\texit\n\t\t\t\t\t;;')

				alias.write('\n\t\tesac')

			if data['blueprint'][data['blueprint'].index(argument) + len(argument)] == '?':
				alias.write('\n\telse')
				alias.write('\n\t\t' + argument + '="' + data['arguments'][argument]['values']['default'] + '"')
				alias.write('\n\tfi')

				alias.write('\n')
			else:
				missingValueError = colors.FAIL + colors.BOLD + argument + colors.ENDC + colors.FAIL + u' is a required argument.' + colors.ENDC
				if data['arguments'][argument].has_key('errors'):
					if data['arguments'][argument]['errors'].has_key('missing'):
						missingValueError = data['arguments'][argument]['errors']['missing']

				alias.write('\n\telse')
				alias.write('\n\t\t')
				alias.write('echo "' + colors.FAIL)
				alias.write(u'[✖] '.encode('utf8'))
				alias.write(missingValueError + '"')
				alias.write('\n\t\texit')
				alias.write('\n\tfi')

				alias.write('\n')

	# Generate command from blueprint and data.
	command = data['command']
	command = command.replace('{', '$').replace('}', '')

	# Call the blueprint's command.
	alias.write('\n\t' + command)

	# Close the function declration.
	alias.write('\n}')

	# Call the function...
	alias.write('\n\n' + blueprint[0] + ' "$@"')

	# Trailing new line.
	alias.write('\n')

	alias.close()

	# Make new alias executable.
	new_alias = configuration['aliases'].replace('~', home) + blueprint[0];
	os.chmod(new_alias, os.stat(new_alias).st_mode | 0111)

	print colors.OKGREEN + u'- [✔] Successfully generated alias ' + colors.BOLD + blueprint[0] + colors.ENDC + colors.ENDC + colors.OKGREEN + ' from blueprint ' + colors.BOLD + blueprint[0] + '.json' + colors.ENDC + colors.ENDC + colors.OKGREEN + '.' + colors.ENDC

	someOperationsExecuted = True

if someOperationsExecuted:
	print

print colors.OKGREEN + colors.BOLD + u'[✔] Done!' + colors.ENDC
